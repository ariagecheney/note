del /?  每个命令
dos  
打印系统所有环境变量  set
这是我学习之中知道的一些关于重定向和管道的知识，并积累的资料，在这里和大家分享。如果说的有不足和错误的地方，请指出。毕竟是交流信息。我这里是从DOS和C语言方面看它，没有太多涉及LINUX中所说的。我想从以下几个方面叙述：
一、     重定向：
所谓重定向，就是不使用系统的标准输入端口、标准输出端口或标准错误端口，而进行重新的指定，所以重定向分为输出重定向、输入重定向和错误重定向（注：
STDIN   0   标准输入   键盘     命令在执行时所要的输入数据通过它来取得  
STDOUT   1   标准输出   显示器   命令执行后的输出结果从该端口送出  
STDERR   2   标准错误   显示器   命令执行时的错误信息通过该端口送出   ）。
通常情况下重定向到一个文件。重定向命令又称转向命令。其中错误重定向和输出重定向有些类似，就不多说，学过C++可能会明白的多些。
所 谓输出重定向指把执行相应DOS命令时本应在屏幕上显示的内容输出到重定向命令所指向的文件或设备中去。输出重定向命令 > 、>>。它们的区别是：如果你使用的是 > ，原文件会被删除，重新生成新的文件，其内容如上所述；如果你使用的是 >> ，它以追加的方式，将命令的输出写入文件的末尾，原文件内容会被保留，新的内容会添加到原文件件的内容的后面。主要用在某个命令的输出很多，在屏幕上不能 完全显示，就可把它重定向到一个文件中，稍后再用文本编辑器来打开这个文件。
输入重定向使输入信息来自文件。如果一个名为file.com的文件 C:>file 之后，执行file时所需的处理信息就改为由文件file读入，这就是输入重定向。小于号<是输入重定向操作符，在<之后的文件名或设备名是 重定向的输入源。如果一个程序时需要输入较多数据，使用输入重定向可以提高效率。在这里要说一些过滤命令 more 、sort 和 find 。其中more进行分屏显示；find 查找符合条件的内容；sort（按行）排序。
例如：（我是在windows命令提示符中用的）
例1：　　
     more < f:\turboc2\readme 
more的输入来自　c:\tc\readme 文件内容多。这个命令与 
type f:\turboc2\readme | more 
作用相同，但更简洁，效率也更高。
例2：(注cmd重定向进入后用exit返回原目录)
   cmd > file 把 stdout 重定向到 file 文件中 
   cmd >> file 把 stdout 重定向到 file 文件中(追加) 
   cmd 1> file 把 stdout 重定向到 file 文件中 
   cmd > file 2>&1 把 stdout 和 stderr 一起重定向到 file 文件中 
   cmd 2> file 把 stderr 重定向到 file 文件中 
   cmd 2>> file 把 stderr 重定向到 file 文件中(追加) 
   cmd >> file 2>&1 把 stderr 和 stderr 一起重定向到 file 文件中 
   cmd < file >file2 cmd 命令以 file 文件作为 stdin，以 file2 文件作为 stdout
       注：>&n 使用系统复制文件描述符 n 并把结果用作标准输出 
           <&n 标准输入复制自文件描述符 n 
           <&- 关闭标准输入（键盘） 
           >&- 关闭标准输出 
           n<&- 表示将 n 号输入关闭 
           n>&- 表示将 n 号输出关闭
           &> 同时实现输出重定向和错误重定向
用 途：DOS的标准输入输出通常是在标准设备键盘和显示器上进行的, 利用重定向,可以方便地将输入输出改向磁盘文件或其它设备。如在批处理命令执行期间为了禁止命令或程序执行后输出信息而扰乱屏幕, 可用DOS重定向功能把输出改向NUL设备(NUL不指向任何实际设备): C:\>copy a.txt b.txt > NUL。命令执行结束不显示"1 file(s) copied"的信息。有的交互程序在执行时要求很多键盘输入, 但有时输入是固定不变的, 为加快运行速度, 可预先建立一个输入文件,此文件的内容为程序的键盘输入项, 每个输入项占一行。假如有一个程序cx 其输入项全部包括在文件in.dat中, 执行 C:\>cx <in.dat>NUL 程序就自动执行。
二、     管道：
进 程从“管道”的一端发送另一端接收，也就是说将若干命令用输入输出“管道”串接在一起，这就是管道；管道在某种程度上是输入和输出重定向的结合，前一个命 令的输出，作为下一个命令的输入，而不需要经过任何中间文件。竖线字符“|”是管道操作符，管道命令经常与上面讲的过滤命令联合使用。DOS的管道功能是 使一个程序或命令的标准输出用做另一个程序或命令的标准输入。如把DEBUG的输入命令写入文件aaa, 用type命令通过管道功能将aaa的内容传输给DEBUG, 在DEBUG执行期间不再从控制台索取命令参数, 从而提高了机器效率。命令为: C:\>type aaa|DEBUG >bbb。

例如，这是我以前看到的例子。命令dir|more使得当前目录列表在屏幕上逐屏显示。dir的输出是整个目录列表，它不出现在屏幕上而是由于符号“|”的规定，成为下一个命令more的输入，more命令则 将其输入一屏一屏地显示，成为命令行的输出。再如命令dir|find”hello”>file，其中 dir的输出是当前目录列表，不出现在屏幕上而是成为find命令的输入。find命令在输入文件中寻找指定字符串"hello"并输出包含这个字符串的 行，由于输出重定向符号>的规定，最后的输出已存入文件file，不出现在屏幕上。命令dir|find"< dir >file则是将当前目录项中的子目录项寻找出来并存入文件file中。




在dos下删除文件夹或文件，先要确定文件夹或文件是否有特殊的属性，比如“系统”、“只读”、“隐藏”，如果有，去掉这些属性，命令如下 
文件夹： attrib c:\windows -s -r -h  

文件：attrib -s -h -r c:\windows\autorun.inf 

删除命令如下， 
删除文件夹（空）：rd c:\windows  

删除文件：del c:\windows\autorun.inf 

注：如果是当前路径下操作，可以省略路径。如：rd 新建文件夹 或 del 新建文件.txt 



MKLINK [[/D] | [/H] | [/J]] Link Target

        /D      创建目录符号链接。默认为文件
                符号链接。
        /H      创建硬链接，而不是符号链接。
        /J      创建目录联接。
        Link    指定新的符号链接名称。
        Target  指定新链接引用的路径
                (相对或绝对)。



新建文件   type nul > log.txt

msi安装  msiexec /package path
