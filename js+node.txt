要是两个值类型不同，返回false
要是两个值都是number类型，并且数值相同，返回true
要是两个值都是stirng，并且两个值的String内容相同，返回true
要是两个值都是true或者都是false，返回true
要是两个值都是指向相同的Object，Array或者function，返回true
要是两个值都是null或者都是undefined，返回true
==操作符：
如果两个值具有相同类型，会进行===比较，返回===的比较值
如果两个值不具有相同类型，也有可能返回true
如果一个值是null另一个值是undefined，返回true
如果一个值是string另个是number，会把string转换成number再进行比较
如果一个值是true，会把它转成1再比较，false会转成0
如果一个值是Object，另一个是number或者string，会把Object利用 valueOf()或者toString()转换成原始类型再进行比较

//“||”运算符的运算法则如下：

如果||左侧表达式的值为真值，则返回左侧表达式的值；否则返回右侧表达式的值。
如果&&左侧表达式的值为真值，则返回右侧表达式的值；否则返回左侧表达式的值。
new Date()接收毫秒和日期字符串，以及表示年，月（基于0），日，时（0-23），分（0-60），秒，毫秒（但是这基于本地时间，而不是GMT时间），返回对象。火狐只支持‘2/1/2015’或者‘英文月名 日，年’否则返回NaN。Date.parse()接收日期字符串Date.parse("2011-10-10T14:48:00")，或者日期对象。Date.now()返回调用该函数的时间毫秒数。
默认情况下，Date对象返回的都是当前时区的时间。Date.UTC方法可以返回UTC时间（世界标准时间）。该方法接受年、月、日等变量作为参数，返回当前距离1970年1月1日 00:00:00 UTC的毫秒数。该方法的参数用法与Date构造函数完全一致，比如月从0开始计算。
dateObj.toLocaleString()="2015/2/28 上午10:40:23" dateObj.toString()="Sat Feb 28 2015 10:40:23 GMT+0800 (中国标准时间)"。但是valueOf() getTime()方法返回日期的毫秒数。所以日期对象可以直接比较大小，因为强制转换，调用对象的valueOf（）方法。减法转换为数值，加法转换为字符串（utc）
格式化方法：var testDate = new Date(2015,1,28,16,30,30,233);
testDate.toDateString()="Sat Feb 28 2015"
testDate.toTimeString()="16:30:30 GMT+0800"注意火狐和chrome不一样。
testDate.toLocaleDateString()="2015/2/28"
testDate.toLocaleTimeString()="下午4:30:30"
即使字符串包含双字节字符，每个字符也仍算一个字符。字符串访问个别字符方法‘abc’[2]='c'
数组的slice（）方法，不影响原数组，只是根据起始结束位置复制。如果为负数，用数组长度加上该数确定索引位置。splice（）会改变原数组1删除：splice（2,2）；2插入splice（2,0，‘red’，‘yellow’）；3替换splice（2,1，‘red’，‘yellow’）该方法返回删除项组成的数组，不删则为[]；
字符串的切片方法有三个，slice()与substring（）相似，但是substr（）第二个参数代表个数。注意传入负数的时候不一样。且第二个参数可选。
字符串访问索引的方法indexOf()和lastIndexOf（），还有第二个参数，就是开始查找指定字符的起始索引位置，而数组没有，但都是用全等操作。
字符串的trim（）方法，返回的是副本。IE8以前注意用trimLeft（）timeRight（）方法。
escape不编码字符有69个：*，+，-，.，/，@，_，0-9，a-z，A-Z

encodeURI不编码字符有82个：!，#，$，&，'，(，)，*，+，,，-，.，/，:，;，=，?，@，_，~，0-9，a-z，A-Z

encodeURIComponent不编码字符有71个：!， '，(，)，*，-，.，_，~，0-9，a-z，A-Z
数组的sort（）自定义排序：一般会把数组的每个元素调用toString（）方法再进行比较，即使是数值。如果简单的自定义排序（元素为数值或者对象的valueOf（）方法返回的是数值，则可使用简单方法：function com(a,b){return a-b}升序，反序可以调用reverse（）方法）;如果是对对象排序（按照其中的某一个属性）：function comparestime(a,b)
    {
        if(a.ctime==0)
        {
            a.ctime=now;
        }
        if(b.ctime==0)
        {
            b.ctime=now;
        }
        return parseInt(a.ctime)-parseInt(b.ctime);
    }
两种方式使用in操作符：单独使用时，in在通过对象能够访问给定属性时返回true，无论属性在实例中还是原型中。，Object.keys()返回对象中所有可枚举的属性。而Object.getOwnPropertyNames(),无论是否可枚举都显示出来。都可用来替代for-in方法
闭包的注意：闭包（匿名函数的一种特定意义）只能取得包含函数中任何变量的最终值。
每个函数在被调用时，其活动对象就自动会获取两个特殊变量：this，arguments。内部函数在搜索这两个变量时，只会搜索其活动对象为止。因此永远也不可能直接访问外部函数中的这两个变量。因此要把外部作用域中的这两个变量保存在闭包能够访问的变量里。
js用私有作用域（闭包）模仿其他语言的块级作用域。（function（）{
	//这里可以定于变量，此函数执行完毕，则私有变量（用var声明）全部销毁

}）（）
实例中的指针总是指向原型(在更改原型前的实例)
组合使用构造函数和原型模式是定义引用类型的一种默认模式
寄生构造函数模式：适用为js标准引用类型更改或添加属性、或方法时使用的构造函数模式，因为这种方式不会破坏标准库的命名空间。同样无法用instanceof确定其应用类型，因为其本质还是同js已有引用类型相同。
稳妥构造函数模式：适合定义对象拥有私有属性和方法的能力的实例。注意初始化时不用new操作符，并且在初始化时传入私有变量。
继承
组合继承：使用原型链实现对父对象原型属性和方法的继承，借用构造函数实现对父对象实例属性和方法的继承。注意这种机制利用了实例属性会覆盖原型中同名的属性和方法，即原型链搜索机制
寄生组合式继承：

javascript 作用域为函数作用域，并且是静态作用域，即作用域的嵌套关系，是在定义时确定的，而不是在运行时确定的。（词法分析：运行时环境）e.g：var scope = 'top'; var f1 = function(){console.log(scope)}; var f2 = function(){var scope = 'local'; f1()}; f2();  ‘top’。上下文对象可以说是静态作用域的补充。函数和对象的所属关系在调用时才体现出来。call和apply，可以改变函数执行的上下文。

闭包：由函数（环境）及其封闭的自由变量（引用的变量，被复制成一份副本）组成的集合体
用途1：嵌套回调函数2：实现私有成员（把一个对象用闭包封装起来，只返回一个访问器的对象）
Object.observe方法用于观察对象属性的变化。
var o = {};

Object.observe(o, function(changes) {
  changes.forEach(function(change) {
    console.log(change.type, change.name, change.oldValue);
  });
});

o.foo = 1; // add, 'foo', undefined
o.foo = 2; // update, 'foo', 1
delete o.foo; // delete, 'foo', 2


使用attributes方法存取 data-* 自定义属性的值

<div id = "user" uid = "12345" uname = "脚本之家" > </div>

var user = document . getElementById ( 'user' ) ;
var userName = user . getAttribute ( 'uname' ) ; // userName = '脚本之家'
var userId = user . getAttribute ( 'uid' ) ; // userId = '12345'

dataset属性存取data-*自定义属性的值

这种方式通过访问一个元素的 dataset 属性来存取 data-* 自定义属性的值。这个 dataset 属性是HTML5 JavaScript API的一部分，用来返回一个所有选择元素 data- 属性的DOMStringMap对象。

使用这种方法时，不是使用完整的属性名，如 data-uid 来存取数据，应该去掉data- 前缀。

还有一点特别注意的是： data- 属性名如果包含了连字符，例如：data-date-of-birth ，连字符将被去掉，并转换为驼峰式的命名，前面的属性名转换后应该是： dateOfBirth

// 使用setAttribute设置 data- 属性
user . setAttribute ( 'site' , 'http://www.jb51.net' ) ;


<div id="user" data-id="1234567890" data-name="脚本之家" data-date-of-birth>码头</div>
<script type="text/javascript">
var el = document.querySelector('#user');
console.log(el.id); // 'user'
console.log(el.dataset);//一个DOMStringMap
console.log(el.dataset.id); // '1234567890'
console.log(el.dataset.name); // '脚本之家'
console.log(el.dataset.dateOfBirth); // ''
el.dataset.dateOfBirth = '1985-01-05'; // 设置data-date-of-birth的值.
console.log('someDataAttr' in el.dataset);//false
el.dataset.someDataAttr = 'mydata';
console.log('someDataAttr' in el.dataset);//true
</script>

如果你想删掉一个 data-属性 ，可以这么做： delete el . dataset . id ; 或者 el .dataset . id = null ; 。
看起来很美，哈哈，但是不幸的是，新的 dataset 属性只有在Chrome 8+ Firefox(Gecko) 6.0+ Internet Explorer 11+ Opera 11.10+ Safari 6+浏览器中实现，所以在此期间最好用的getAttribute和setAttribute来操作。

data-属性选择器同样适用于 js和css  '[data-text-colour="red"]'


2015.3.5--Node.js
Node.js是一个事件驱动非阻塞型I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。
node 学习 http://nodeschool.io/zh-cn/#workshopper-list

模块接口的唯一变化是使用 module.exports = Hello 代替了exports.hello = function(){}。 在外部引用该模块时，其接口对象就是要输出的 Hello 对象本身，而不是原先的 exports。
为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。4类模块，原生和3类文件模块。
Node.js 所有的异步I/O 操作在完成时都会发送一个事件到事件队列。
$ sudo npm install -g supervisor

foo.js文件的第一行，如果加入了解释器的位置，就可以将其作为命令行工具直接调用。#!/usr/bin/env node 调用前，需更改文件的执行权限。$ chmod u+x myscript.js
$ ./foo.js arg1 arg2 ...

package.json文件可以手工编写，也可以使用npm init命令自动生成。

npm install express --save
npm install express --save-dev
上面代码表示单独安装express模块，--save参数表示将该模块写入dependencies属性，--save-dev表示将该模块写入devDependencies属性。

npm help config   config info can be viewed

npm info underscore description  查看某个模块的信息

npm install git://github.com/package/path.git

npm install sax@latest
$ npm install sax@0.1.1
$ npm install sax@">=0.1.0 <0.2.0"   选择安装模块的特定版本

npm允许使用特殊符号，指定所要使用的版本范围，假定当前版本是1.0.4。

只接受补丁包：1.0 或者 1.0.x 或者 ~1.0.4
只接受小版本和补丁包：1 或者 1.x 或者 ^1.0.4
接受所有更新：* or x

还可以使用数学运算符（比如>, <, =, >= or <=等），指定版本范围。

>2.1
1.0.0 - 1.2.0
>1.0.0-alpha
>=1.0.0-rc.0 <1.0.1
^2 <2.2 || > 2.3
注意，如果使用连字号，它的两端必须有空格。如果不带空格，会被npm理解成预发布的tag，比如1.0.0-rc.1。

npm update uninstall  更新和卸载模块（-g） 参数全局

npm list -g

npm search
package.json文件有一项scripts，用于指定脚本命令，供npm直接调用。
npm run会创建一个shell，执行指定的命令，并将node_modules/.bin加入PATH变量，这意味着本地模块可以直接运行。也就是说，npm run lint直接运行jshint **.js即可，而不用./node_modules/.bin/jshint **.js。

如果直接运行npm run不给出任何参数，就会列出scripts属性下所有命令。

更方便的写法是引用其他npm run命令。

"build": "npm run build-js && npm run build-css"
上面的写法是先运行npm run build-js，然后再运行npm run build-css，两个命令中间用&&连接。如果希望两个命令同时平行执行，它们中间可以用&连接。

scripts指定了运行脚本命令的npm命令行缩写，比如start指定了运行npm run start时，所要执行的命令。

curl -k https://localhost:8000   https服务器

Node.js 的事件循环对开发者不可见，由 libev 库实现。libev
支持多种类型的事件，如 ev_io、ev_timer、ev_signal、ev_idle 等，在 Node.js 中均被
EventEmitter 封装。libev 事件循环的每一次迭代，在 Node.js 中就是一次 Tick，libev 不
断检查是否有活动的、可供检测的事件监听器，直到检测不到时才退出事件循环，进程结束。

但实际上和对象又有本质的区别，因为
require 不会重复加载模块，同一个实例。如果模块目录中没有package.json文件，node.js会尝试在模块目录中寻找index.js或index.node文件进行加载。
模块一旦被加载以后，就会被系统缓存。如果第二次还加载该模块，则会返回缓存中的版本，这意味着模块实际上只会执行一次。如果希望模块执行多次，则可以让模块返回一个函数，然后多次调用该函数。

module.exports = Hello 代替了 exports.Hello=
Hello。在外部引用该模块时，其接口对象就是要输出的 Hello 对象本身，而不是原先的
exports。事实上，exports 本身仅仅是一个普通的空对象，即 {}，它专门用来声明接口，本
质上是通过它为模块闭包①的内部建立了一个有限的访问接口。因为它没有任何特殊的地方，
所以可以用其他东西来代替，譬如我们上面例子中的 Hello 对象。不可以通过对 exports 直接赋值代替对 module.exports 赋值。
exports 实际上只是一个和 module.exports 指向同一个对象的变量，
它本身会在模块执行结束后释放，但 module 不会，因此只能通过指定
module.exports 来改变访问接口。

$ npm install/i express


如果把包安装到全局，可以提高程序的重复利用程度，避免同样的内容的多
份副本，但坏处是难以处理不同的版本依赖。如果把包安装到当前目录，
或者说本地，则不会有不同程序依赖不同版本的包的冲突问题，同时还减
轻了包作者的 API 兼容性压力，但缺陷则是同一个包可能会被安装许多次。

而当我们使用全局模
式安装时，npm 会将包安装到系统目录，譬如 /usr/local/lib/node_modules/，同时 package.json 文
件中 bin 字段包含的文件会被链接到 /usr/local/bin/。/usr/local/bin/ 是在PATH 环境变量中默认
定义的，因此就可以直接在命令行中运行 supervisor script.js命令了。


使用全局模式安装的包并不能直接在 JavaScript 文件中用 require 获
得，因为 require 不会搜索 /usr/local/lib/node_modules/。我们会在第6 章
详细介绍模块的加载顺序。

$ npm link express
./node_modules/express -> /usr/local/lib/node_modules/express
npm link 命令不支持Windows。

除了将全局的包链接到本地以外，使用 npm link命令还可以将本地的包链接到全局。
使用方法是在包目录（ package.json 所在目录）中运行 npm link 命令。如果我们要开发
一个包，利用这种方法可以非常方便地在不同的工程间进行测试。

例如创建一个名为 byvoidmodule 的目录，然后在这个
目录中运行npm init：这样就在 byvoidmodule 目录中生成一个符合 npm 规范的 package.json 文件。创建一个
index.js 作为包的接口，一个简单的包就制作完成了。
在发布前，我们还需要获得一个账号用于今后维护自己的包，使用 npm adduser 根据
提示输入用户名、密码、邮箱，等待账号创建完成。完成后可以使用 npm whoami 测验是
否已经取得了账号。
接下来，在 package.json 所在目录下运行 npm publish，稍等片刻就可以完成发布了。
打开浏览器，访问 http://search.npmjs.org/ 就可以找到自己刚刚发布的包了。现在我们可以在
世界的任意一台计算机上使用 npm install byvoidmodule 命令来安装它。图3-6 是npmjs.
org上包的描述页面。
如果你的包将来有更新，只需要在 package.json 文件中修改 version 字段，然后重新
使用 npm publish 命令就行了。如果你对已发布的包不满意（比如我们发布的这个毫无意
义的包），可以使用 npm unpublish 命令来取消发布。


在命令行下执行 node debug debug.js，
run 执行脚本，在第一行暂停
restart 重新执行脚本
cont, c 继续执行，直到遇到下一个断点
next, n 单步执行
step, s 单步执行并进入函数
out, o 从函数中步出
setBreakpoint(), sb() 在当前行设置断点
setBreakpoint(‘f()’), sb(...) 在函数f的第一行设置断点
setBreakpoint(‘script.js’, 20), sb(...) 在 script.js 的第20行设置断点
clearBreakpoint, cb(...) 清除所有断点
backtrace, bt 显示当前的调用栈
list(5) 显示当前执行到的前后5行代码
watch(expr) 把表达式 expr 加入监视列表
unwatch(expr) 把表达式 expr 从监视列表移除
watchers 显示监视列表中所有的表达式和值
repl 在当前上下文打开即时求值环境
kill 终止当前执行的脚本
scripts 显示当前已加载的所有脚本
version 显示 V8 的版本



V8 提供的调试功能是基于 TCP 协议的，因此 Node.js 可以轻松地实现远程调试。在命
令行下使用以下两个语句之一可以打开调试服务器：
node --debug[=port] script.js
node --debug-brk[=port] script.js

node --debug 命令选项可以启动调试服务器，默认情况下调试端口是 5858，也可以
使用 --debug=1234 指定调试端口为 1234。使用 --debug 选项运行脚本时，脚本会正常
执行，但不会暂停，在执行过程中调试客户端可以连接到调试服务器。如果要求脚本暂停执
行等待客户端连接，则应该使用 --debug-brk 选项。这时调试服务器在启动后会立刻暂停
执行脚本，等待调试客户端连接。
当调试服务器启动以后，可以用命令行调试工具作为调试客户端连接，例如：
//在一个终端中
$ node --debug-brk debug.js
debugger listening on port 5858
//在另一个终端中
$ node debug 127.0.0.1:5858
connecting... ok
debug> n
break in /home/byvoid/debug.js:2
1 var a = 1;
2 var b = 'world';
3 var c = function (x) {
4 console.log('hello ' + x + a);
debug>
事实上，当使用 node debug debug.js 命令调试时，只不过是用 Node.js 命令行工
具将以上两步工作自动完成而已。


express 学习
npm help json 有关package.json的信息


 merge-descriptors@1.0.0
 utils-merge@1.0.0
 cookie-signature@1.0.6
 methods@1.1.1
 cookie@0.1.2
 fresh@0.2.4
 escape-html@1.0.1
 range-parser@1.0.2
 finalhandler@0.3.4
 vary@1.0.0
 content-type@1.0.1
 parseurl@1.3.0
 serve-static@1.9.2
 content-disposition@0.5.0
 path-to-regexp@0.1.3
 depd@1.0.0
 qs@2.4.1
 on-finished@2.2.0 (ee-first@1.1.0)
 debug@2.1.3 (ms@0.7.0)
 etag@1.5.1 (crc@3.2.1)
 send@0.12.2 (destroy@1.0.3, ms@0.7.0, mime@1.3.4)
 proxy-addr@1.0.7 (forwarded@0.1.0, ipaddr.js@0.1.9)
 accepts@1.2.5 (negotiator@0.5.1, mime-types@2.0.10)
 type-is@1.6.1 (media-typer@0.3.0, mime-types@2.0.10)

express-generator
 C:\Users\Administrator\AppData\Roaming\npm\express -u C:\Users\Administrator\App
Data\Roaming\npm\node_modules\express-generator\bin\express
express-generator@4.12.1 C:\Users\Administrator\AppData\Roaming\npm\node_modules
\express-generator
├── sorted-object@1.0.0
├── commander@2.6.0
└── mkdirp@0.5.0 (minimist@0.0.8)
express --help

    -h, --help          output usage information
    -V, --version       output the version number
    -e, --ejs           add ejs engine support (defaults to jade)
        --hbs           add handlebars engine support
    -H, --hogan         add hogan.js engine support
    -c, --css <engine>  add stylesheet <engine> support (less|stylus|compass) (d
efaults to plain css)
        --git           add .gitignore
    -f, --force         force on non-empty directory


f:\myapp\hello>express -e
destination is not empty, continue? [y/N] y

   create : .
   create : ./package.json
   create : ./app.js
   create : ./public
   create : ./views
   create : ./views/index.ejs
   create : ./views/error.ejs
   create : ./routes
   create : ./routes/index.js
   create : ./routes/users.js
   create : ./bin
   create : ./bin/www
   create : ./public/javascripts
   create : ./public/images
   create : ./public/stylesheets
   create : ./public/stylesheets/style.css

   install dependencies:
     $ cd . && npm install

   run the app:
     $ DEBUG=hello:* ./bin/www




npm install
debug@2.1.3 node_modules\debug
└── ms@0.7.0

ejs@2.3.1 node_modules\ejs

cookie-parser@1.3.4 node_modules\cookie-parser
├── cookie-signature@1.0.6
└── cookie@0.1.2

serve-favicon@2.2.0 node_modules\serve-favicon
├── fresh@0.2.4
├── ms@0.7.0
├── parseurl@1.3.0
└── etag@1.5.1 (crc@3.2.1)

morgan@1.5.2 node_modules\morgan
├── basic-auth@1.0.0
├── depd@1.0.0
└── on-finished@2.2.0 (ee-first@1.1.0)

body-parser@1.12.2 node_modules\body-parser
├── content-type@1.0.1
├── bytes@1.0.0
├── raw-body@1.3.3
├── depd@1.0.0
├── on-finished@2.2.0 (ee-first@1.1.0)
├── qs@2.4.1
├── iconv-lite@0.4.7
└── type-is@1.6.1 (media-typer@0.3.0, mime-types@2.0.10)

express@4.12.3 node_modules\express
├── merge-descriptors@1.0.0
├── utils-merge@1.0.0
├── cookie-signature@1.0.6
├── methods@1.1.1
├── cookie@0.1.2
├── fresh@0.2.4
├── escape-html@1.0.1
├── range-parser@1.0.2
├── content-type@1.0.1
├── vary@1.0.0
├── finalhandler@0.3.4
├── parseurl@1.3.0
├── content-disposition@0.5.0
├── serve-static@1.9.2
├── path-to-regexp@0.1.3
├── depd@1.0.0
├── qs@2.4.1
├── etag@1.5.1 (crc@3.2.1)
├── on-finished@2.2.0 (ee-first@1.1.0)
├── proxy-addr@1.0.7 (forwarded@0.1.0, ipaddr.js@0.1.9)
├── send@0.12.2 (destroy@1.0.3, ms@0.7.0, mime@1.3.4)
├── accepts@1.2.5 (negotiator@0.5.1, mime-types@2.0.10)
└── type-is@1.6.1 (media-typer@0.3.0, mime-types@2.0.10)


mongoDB

wmic os get caption
wmic os get osarchitecture
查看系统和架构
http://docs.mongoing.com/manual-zh/   mongodb 中文手册
http://www.runoob.com/mongodb/mongodb-aggregate.html 菜鸟教程
下砸mis 安装  静默安装 msiexec

创建文件夹并安装服务
E:\installer\work\Mongodb64\bin>mongod.exe --dbpath "e:\installer\work\Mongodb64
\data\db" --logpath "e:\installer\work\Mongodb64\data\log\mongod.log" --install
--serviceName "mongodb"


E:\installer\work\Mongodb64\bin>mongod.exe --dbpath "e:\installer\work\mongodb64\da
ta\db"
删除服务  把install改成remove

mongodb shell  mongo.exe

help

        db.mycoll.help()             help on collection methods
        sh.help()                    sharding helpers
        rs.help()                    replica set helpers
        help admin                   administrative help
        help connect                 connecting to a db help
        help keys                    key shortcuts
        help misc                    misc things to know
        help mr                      mapreduce

        show dbs                     show database names
        show collections             show collections in current database
        show users                   show users in current database
        show profile                 show most recent system.profile entries wit
h time >= 1ms
        show logs                    show the accessible logger names
        show log [name]              prints out the last segment of log in memor
y, 'global' is default
        use <db_name>                set current database
        db.foo.find()                list objects in collection foo
        db.foo.find( { a : 1 } )     list objects in foo where a == 1
        it                           result of the last line evaluated; use to f
urther iterate
        DBQuery.shellBatchSize = x   set default number of items to display on s
hell
        exit                         quit the mongo shell


db.mycoll.help()


DBCollection help
        db.myColl.find().help() - show DBCursor help
        db.myColl.count()
        db.myColl.copyTo(newColl) - duplicates collection by copying all documen
ts to newColl; no indexes are copied.
        db.myColl.convertToCapped(maxBytes) - calls {convertToCapped:'myColl', s
ize:maxBytes}} command
        db.myColl.dataSize()
        db.myColl.distinct( key ) - e.g. db.myColl.distinct( 'x' )
        db.myColl.drop() drop the collection
        db.myColl.dropIndex(index) - e.g. db.myColl.dropIndex( "indexName" ) or
db.myColl.dropIndex( { "indexKey" : 1 } )
        db.myColl.dropIndexes()
        db.myColl.ensureIndex(keypattern[,options])
        db.myColl.explain().help() - show explain help
        db.myColl.reIndex()
        db.myColl.find([query],[fields]) - query is an optional query filter. fi
elds is optional set of fields to return.
                                                      e.g. db.myColl.find( {x:77
} , {name:1, x:1} )
        db.myColl.find(...).count()
        db.myColl.find(...).limit(n)
        db.myColl.find(...).skip(n)
        db.myColl.find(...).sort(...)
        db.myColl.findOne([query])
        db.myColl.findAndModify( { update : ... , remove : bool [, query: {}, so
rt: {}, 'new': false] } )
        db.myColl.getDB() get DB object associated with collection
        db.myColl.getPlanCache() get query plan cache associated with collection

        db.myColl.getIndexes()
        db.myColl.group( { key : ..., initial: ..., reduce : ...[, cond: ...] }
)
        db.myColl.insert(obj)
        db.myColl.mapReduce( mapFunction , reduceFunction , <optional params> )
        db.myColl.aggregate( [pipeline], <optional params> ) - performs an aggre
gation on a collection; returns a cursor
        db.myColl.remove(query)
        db.myColl.renameCollection( newName , <dropTarget> ) renames the collect
ion.
        db.myColl.runCommand( name , <options> ) runs a db command with the give
n name where the first param is the collection name
        db.myColl.save(obj)
        db.myColl.stats({scale: N, indexDetails: true/false, indexDetailsKey: <i
ndex key>, indexDetailsName: <index name>})
        db.myColl.storageSize() - includes free space allocated to this collecti
on
        db.myColl.totalIndexSize() - size in bytes of all the indexes
        db.myColl.totalSize() - storage allocated for all data and indexes
        db.myColl.update(query, object[, upsert_bool, multi_bool]) - instead of
two flags, you can pass an object with fields: upsert, multi
        db.myColl.validate( <full> ) - SLOW
        db.myColl.getShardVersion() - only for use with sharding
        db.myColl.getShardDistribution() - prints statistics about data distribu
tion in the cluster
        db.myColl.getSplitKeysForChunks( <maxChunkSize> ) - calculates split poi
nts over all chunks and returns splitter function
        db.myColl.getWriteConcern() - returns the write concern used for any ope
rations on this collection, inherited from server/db if set
        db.myColl.setWriteConcern( <write concern doc> ) - sets the write concer
n for writes to the collection
        db.myColl.unsetWriteConcern( <write concern doc> ) - unsets the write co
ncern for writes to the collection
安装mogodb驱动nodeJS

> bson@0.2.20 install E:\myapp\microblog\node_modules\mongodb\node_modules\mongo
db-core\node_modules\bson
> (node-gyp rebuild 2> builderror.log) || (exit 0)


E:\myapp\microblog\node_modules\mongodb\node_modules\mongodb-core\node_modules\b
son>node "D:\installer\work\nodeJS\node_modules\npm\bin\node-gyp-bin\\..\..\node
_modules\node-gyp\bin\node-gyp.js" rebuild

> kerberos@0.0.9 install E:\myapp\microblog\node_modules\mongodb\node_modules\mo
ngodb-core\node_modules\kerberos
> (node-gyp rebuild 2> builderror.log) || (exit 0)


E:\myapp\microblog\node_modules\mongodb\node_modules\mongodb-core\node_modules\k
erberos>node "D:\installer\work\nodeJS\node_modules\npm\bin\node-gyp-bin\\..\..\
node_modules\node-gyp\bin\node-gyp.js" rebuild
mongodb@2.0.22 node_modules\mongodb
├── readable-stream@1.0.31 (inherits@2.0.1, string_decoder@0.10.31, isarray@0
.0.1, core-util-is@1.0.1)
└── mongodb-core@1.1.17 (rimraf@2.2.6, mkdirp@0.5.0, bson@0.2.20, kerberos@0.
0.9)


F:\myapp\mooc\views>npm i bower -g
C:\Users\pmzgeek\AppData\Roaming\npm\bower -> C:\Users\pmzgeek\AppData\Roaming\n
pm\node_modules\bower\bin\bower
bower@1.4.1 C:\Users\pmzgeek\AppData\Roaming\npm\node_modules\bower
├── is-root@1.0.0
├── junk@1.0.1
├── stringify-object@1.0.1
├── abbrev@1.0.5
├── user-home@1.1.1
├── chmodr@0.1.0
├── which@1.0.9
├── rimraf@2.3.2
├── archy@1.0.0
├── graceful-fs@3.0.6
├── bower-logger@0.2.2
├── opn@1.0.2
├── bower-endpoint-parser@0.2.2
├── lockfile@1.0.0
├── lru-cache@2.6.2
├── nopt@3.0.1
├── retry@0.6.1
├── tmp@0.0.24
├── q@1.3.0
├── semver@2.3.2
├── mkdirp@0.5.0 (minimist@0.0.8)
├── p-throttler@0.1.1 (q@0.9.7)
├── fstream@1.0.4 (inherits@2.0.1)
├── bower-json@0.4.0 (intersect@0.0.3, graceful-fs@2.0.3, deep-extend@0.2.11)

├── shell-quote@1.4.3 (array-filter@0.0.1, array-reduce@0.0.0, array-map@0.0.
0, jsonify@0.0.0)
├── request-progress@0.3.1 (throttleit@0.0.2)
├── promptly@0.2.0 (read@1.0.5)
├── github@0.2.4 (mime@1.3.4)
├── chalk@1.0.0 (escape-string-regexp@1.0.3, ansi-styles@2.0.1, supports-colo
r@1.3.1, strip-ansi@2.0.1, has-ansi@1.0.3)
├── mout@0.11.0
├── bower-config@0.6.1 (osenv@0.0.3, graceful-fs@2.0.3, optimist@0.6.1, mout@
0.9.1)
├── cardinal@0.4.4 (ansicolors@0.2.1, redeyed@0.4.4)
├── decompress-zip@0.1.0 (mkpath@0.1.0, readable-stream@1.1.13, touch@0.0.3,
binary@0.3.0)
├── configstore@0.3.2 (object-assign@2.0.0, xdg-basedir@1.0.1, osenv@0.1.0, u
uid@2.0.1, js-yaml@3.3.0)
├── handlebars@2.0.0 (optimist@0.3.7, uglify-js@2.3.6)
├── insight@0.5.3 (object-assign@2.0.0, async@0.9.0, lodash.debounce@3.0.3, t
ough-cookie@0.12.1, os-name@1.0.3)
├── inquirer@0.8.0 (figures@1.3.5, ansi-regex@1.1.1, mute-stream@0.0.4, throu
gh@2.3.7, readline2@0.1.1, lodash@2.4.2, chalk@0.5.1, rx@2.5.2, cli-color@0.3.3)

├── glob@4.5.3 (inherits@2.0.1, inflight@1.0.4, once@1.3.1, minimatch@2.0.4)
├── fstream-ignore@1.0.2 (inherits@2.0.1, minimatch@2.0.4)
├── request@2.53.0 (caseless@0.9.0, json-stringify-safe@5.0.0, aws-sign2@0.5.
0, forever-agent@0.5.2, stringstream@0.0.4, oauth-sign@0.6.0, tunnel-agent@0.4.0
, isstream@0.1.2, node-uuid@1.4.3, qs@2.3.3, form-data@0.2.0, combined-stream@0.
0.7, mime-types@2.0.10, http-signature@0.10.1, tough-cookie@1.0.0, hawk@2.3.1, b
l@0.9.4)
├── bower-registry-client@0.3.0 (graceful-fs@2.0.3, request-replay@0.2.0, rim
raf@2.2.8, lru-cache@2.3.1, async@0.2.10, mkdirp@0.3.5, request@2.51.0)
├── tar-fs@1.5.0 (pump@1.0.0, tar-stream@1.1.4)
└── update-notifier@0.3.2 (is-npm@1.0.0, semver-diff@2.0.0, string-length@1.0
.0, latest-version@1.0.0)



F:\myapp\mooc>npm i grunt -g
grunt@0.4.5 C:\Users\pmzgeek\AppData\Roaming\npm\node_modules\grunt
├── dateformat@1.0.2-1.2.3
├── which@1.0.9
├── eventemitter2@0.4.14
├── getobject@0.1.0
├── rimraf@2.2.8
├── colors@0.6.2
├── async@0.1.22
├── grunt-legacy-util@0.2.0
├── hooker@0.2.3
├── exit@0.1.2
├── lodash@0.9.2
├── coffee-script@1.3.3
├── underscore.string@2.2.1
├── iconv-lite@0.2.11
├── nopt@1.0.10 (abbrev@1.0.5)
├── minimatch@0.2.14 (sigmund@1.0.0, lru-cache@2.6.2)
├── grunt-legacy-log@0.1.1 (underscore.string@2.3.3, lodash@2.4.2)
├── glob@3.1.21 (inherits@1.0.0, graceful-fs@1.2.3)
├── findup-sync@0.1.3 (lodash@2.4.2, glob@3.2.11)
└── js-yaml@2.0.5 (esprima@1.0.4, argparse@0.1.16)



F:\myapp\mooc>npm i grunt-cli -g
C:\Users\pmzgeek\AppData\Roaming\npm\grunt -> C:\Users\pmzgeek\AppData\Roaming\n
pm\node_modules\grunt-cli\bin\grunt
grunt-cli@0.1.13 C:\Users\pmzgeek\AppData\Roaming\npm\node_modules\grunt-cli
├── resolve@0.3.1
├── nopt@1.0.10 (abbrev@1.0.5)
└── findup-sync@0.1.3 (lodash@2.4.2, glob@3.2.11)
